Index: src/com/yuricfurusho/Euler2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/yuricfurusho/Euler2.java	(date 1534531804244)
+++ src/com/yuricfurusho/Euler2.java	(date 1534531804244)
@@ -0,0 +1,68 @@
+package com.yuricfurusho;
+
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Even Fibonacci numbers
+ * Problem 2
+ * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
+ * <p>
+ * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
+ * <p>
+ * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
+ */
+public class Euler2 {
+
+    public static long sumOfEvenTermsInFibonacci(long max) {
+        long sumOfEvenTermsInFibonacci = 0;
+
+        long n = 1;
+        long fibonacciOfN = 1;
+        while (fibonacciOfN < max) {
+            sumOfEvenTermsInFibonacci = sumOfEvenTermsInFibonacci + (fibonacciOfN % 2 == 0 ? fibonacciOfN : 0);
+            fibonacciOfN = fibonacci(++n);
+        }
+
+        System.out.print("max = " + max + "\n"
+                + "sumOfEvenTermsInFibonacci = " + sumOfEvenTermsInFibonacci + "\n");
+        return sumOfEvenTermsInFibonacci;
+
+    }
+
+    private static long fibonacci(long i) {
+        if (i == 1) return 1;
+        if (i == 2) return 2;
+        return fibonacci(i - 1) + fibonacci(i - 2);
+    }
+
+    @Test
+    public void testEuler2() {
+        assertEquals(0, sumOfEvenTermsInFibonacci(1));
+        assertEquals(0, sumOfEvenTermsInFibonacci(2));
+        assertEquals(2, sumOfEvenTermsInFibonacci(3));
+        assertEquals(2, sumOfEvenTermsInFibonacci(5));
+        assertEquals(2, sumOfEvenTermsInFibonacci(8));
+        assertEquals(10, sumOfEvenTermsInFibonacci(13));
+        assertEquals(10, sumOfEvenTermsInFibonacci(21));
+        assertEquals(10, sumOfEvenTermsInFibonacci(34));
+        assertEquals(44, sumOfEvenTermsInFibonacci(55));
+        assertEquals(44, sumOfEvenTermsInFibonacci(89));
+        assertEquals(4613732, sumOfEvenTermsInFibonacci(4000000));
+    }
+
+    @Test
+    public void testFibonacci() {
+        assertEquals(1, fibonacci(1));
+        assertEquals(2, fibonacci(2));
+        assertEquals(3, fibonacci(3));
+        assertEquals(5, fibonacci(4));
+        assertEquals(8, fibonacci(5));
+        assertEquals(13, fibonacci(6));
+        assertEquals(21, fibonacci(7));
+        assertEquals(34, fibonacci(8));
+        assertEquals(55, fibonacci(9));
+        assertEquals(89, fibonacci(10));
+    }
+}
